/**
 * style-api
 * This is a API document for Stylens Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: master@bluehack.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Box".equalsIgnoreCase(className)) {
      return new TypeToken<List<Box>>(){}.getType();
    }
    
    if ("BoxObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<BoxObject>>(){}.getType();
    }
    
    if ("BoxesArray".equalsIgnoreCase(className)) {
      return new TypeToken<List<BoxesArray>>(){}.getType();
    }
    
    if ("GetFeedResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetFeedResponse>>(){}.getType();
    }
    
    if ("GetObjectsByProductIdResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetObjectsByProductIdResponse>>(){}.getType();
    }
    
    if ("GetObjectsByProductIdResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetObjectsByProductIdResponseData>>(){}.getType();
    }
    
    if ("GetObjectsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetObjectsResponse>>(){}.getType();
    }
    
    if ("GetObjectsResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetObjectsResponseData>>(){}.getType();
    }
    
    if ("GetProductResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetProductResponse>>(){}.getType();
    }
    
    if ("GetProductsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetProductsResponse>>(){}.getType();
    }
    
    if ("Product".equalsIgnoreCase(className)) {
      return new TypeToken<List<Product>>(){}.getType();
    }
    
    if ("ProductsArray".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProductsArray>>(){}.getType();
    }
    
    if ("SearchImageResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<SearchImageResponse>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Box".equalsIgnoreCase(className)) {
      return new TypeToken<Box>(){}.getType();
    }
    
    if ("BoxObject".equalsIgnoreCase(className)) {
      return new TypeToken<BoxObject>(){}.getType();
    }
    
    if ("BoxesArray".equalsIgnoreCase(className)) {
      return new TypeToken<BoxesArray>(){}.getType();
    }
    
    if ("GetFeedResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GetFeedResponse>(){}.getType();
    }
    
    if ("GetObjectsByProductIdResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GetObjectsByProductIdResponse>(){}.getType();
    }
    
    if ("GetObjectsByProductIdResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<GetObjectsByProductIdResponseData>(){}.getType();
    }
    
    if ("GetObjectsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GetObjectsResponse>(){}.getType();
    }
    
    if ("GetObjectsResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<GetObjectsResponseData>(){}.getType();
    }
    
    if ("GetProductResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GetProductResponse>(){}.getType();
    }
    
    if ("GetProductsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<GetProductsResponse>(){}.getType();
    }
    
    if ("Product".equalsIgnoreCase(className)) {
      return new TypeToken<Product>(){}.getType();
    }
    
    if ("ProductsArray".equalsIgnoreCase(className)) {
      return new TypeToken<ProductsArray>(){}.getType();
    }
    
    if ("SearchImageResponse".equalsIgnoreCase(className)) {
      return new TypeToken<SearchImageResponse>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
