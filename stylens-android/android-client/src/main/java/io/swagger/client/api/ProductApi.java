/**
 * style-api
 * This is a API document for Stylens Service
 *
 * OpenAPI spec version: 0.0.1
 * Contact: master@bluehack.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.belladati.httpclientandroidlib.entity.mime.MultipartEntityBuilder;

import java.io.File;
import io.swagger.client.model.GetProductResponse;
import io.swagger.client.model.GetProductsResponse;

import org.apache.http.HttpEntity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ProductApi {
  String basePath = "http://api.stylelens.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get Product by hostCode and productNo
  * Returns Product belongs to a Host and productNo
   * @param hostCode 
   * @param productNo 
   * @return GetProductResponse
  */
  public GetProductResponse getProductByHostcodeAndProductNo (String hostCode, String productNo) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'hostCode' is set
    if (hostCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hostCode' when calling getProductByHostcodeAndProductNo",
        new ApiException(400, "Missing the required parameter 'hostCode' when calling getProductByHostcodeAndProductNo"));
    }
    // verify the required parameter 'productNo' is set
    if (productNo == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productNo' when calling getProductByHostcodeAndProductNo",
        new ApiException(400, "Missing the required parameter 'productNo' when calling getProductByHostcodeAndProductNo"));
    }

    // create path and map variables
    String path = "/products/hosts/{hostCode}/products/{productNo}".replaceAll("\\{" + "hostCode" + "\\}", apiInvoker.escapeString(hostCode.toString())).replaceAll("\\{" + "productNo" + "\\}", apiInvoker.escapeString(productNo.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = (HttpEntity) localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetProductResponse) ApiInvoker.deserialize(localVarResponse, "", GetProductResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Product by hostCode and productNo
   * Returns Product belongs to a Host and productNo
   * @param hostCode    * @param productNo 
  */
  public void getProductByHostcodeAndProductNo (String hostCode, String productNo, final Response.Listener<GetProductResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'hostCode' is set
    if (hostCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hostCode' when calling getProductByHostcodeAndProductNo",
        new ApiException(400, "Missing the required parameter 'hostCode' when calling getProductByHostcodeAndProductNo"));
    }
    // verify the required parameter 'productNo' is set
    if (productNo == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productNo' when calling getProductByHostcodeAndProductNo",
        new ApiException(400, "Missing the required parameter 'productNo' when calling getProductByHostcodeAndProductNo"));
    }

    // create path and map variables
    String path = "/products/hosts/{hostCode}/products/{productNo}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "hostCode" + "\\}", apiInvoker.escapeString(hostCode.toString())).replaceAll("\\{" + "productNo" + "\\}", apiInvoker.escapeString(productNo.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = (HttpEntity) localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetProductResponse) ApiInvoker.deserialize(localVarResponse,  "", GetProductResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Find Product by ID
  * Returns a single Product
   * @param productId ID of Product to return
   * @return GetProductResponse
  */
  public GetProductResponse getProductById (String productId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling getProductById",
        new ApiException(400, "Missing the required parameter 'productId' when calling getProductById"));
    }

    // create path and map variables
    String path = "/products/{productId}".replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = (HttpEntity) localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetProductResponse) ApiInvoker.deserialize(localVarResponse, "", GetProductResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Find Product by ID
   * Returns a single Product
   * @param productId ID of Product to return
  */
  public void getProductById (String productId, final Response.Listener<GetProductResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling getProductById",
        new ApiException(400, "Missing the required parameter 'productId' when calling getProductById"));
    }

    // create path and map variables
    String path = "/products/{productId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productId" + "\\}", apiInvoker.escapeString(productId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = (HttpEntity) localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetProductResponse) ApiInvoker.deserialize(localVarResponse,  "", GetProductResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Products by productId
  * Returns similar Products with productId
   * @param productId 
   * @param offset 
   * @param limit 
   * @return GetProductsResponse
  */
  public GetProductsResponse getProducts (String productId, Integer offset, Integer limit) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling getProducts",
        new ApiException(400, "Missing the required parameter 'productId' when calling getProducts"));
    }

    // create path and map variables
    String path = "/products";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productId", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = (HttpEntity) localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetProductsResponse) ApiInvoker.deserialize(localVarResponse, "", GetProductsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Products by productId
   * Returns similar Products with productId
   * @param productId    * @param offset    * @param limit 
  */
  public void getProducts (String productId, Integer offset, Integer limit, final Response.Listener<GetProductsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling getProducts",
        new ApiException(400, "Missing the required parameter 'productId' when calling getProducts"));
    }

    // create path and map variables
    String path = "/products".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "productId", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = (HttpEntity) localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetProductsResponse) ApiInvoker.deserialize(localVarResponse,  "", GetProductsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Query to search products
  * 
   * @param file Image file to upload (only support jpg format yet)
   * @return GetProductsResponse
  */
  public GetProductsResponse getProductsByImageFile (File file) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/products/images";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      HttpEntity httpEntity = (HttpEntity) localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetProductsResponse) ApiInvoker.deserialize(localVarResponse, "", GetProductsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Query to search products
   * 
   * @param file Image file to upload (only support jpg format yet)
  */
  public void getProductsByImageFile (File file, final Response.Listener<GetProductsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/products/images".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      

      HttpEntity httpEntity = (HttpEntity) localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetProductsResponse) ApiInvoker.deserialize(localVarResponse,  "", GetProductsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Products by imageId and objectId
  * Returns Products belongs to a imageId and objectId
   * @param imageId 
   * @param objectId 
   * @return GetProductsResponse
  */
  public GetProductsResponse getProductsByImageIdAndObjectId (String imageId, Integer objectId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'imageId' is set
    if (imageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageId' when calling getProductsByImageIdAndObjectId",
        new ApiException(400, "Missing the required parameter 'imageId' when calling getProductsByImageIdAndObjectId"));
    }
    // verify the required parameter 'objectId' is set
    if (objectId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectId' when calling getProductsByImageIdAndObjectId",
        new ApiException(400, "Missing the required parameter 'objectId' when calling getProductsByImageIdAndObjectId"));
    }

    // create path and map variables
    String path = "/products/images/{imageId}/objects/{objectId}".replaceAll("\\{" + "imageId" + "\\}", apiInvoker.escapeString(imageId.toString())).replaceAll("\\{" + "objectId" + "\\}", apiInvoker.escapeString(objectId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = (HttpEntity) localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetProductsResponse) ApiInvoker.deserialize(localVarResponse, "", GetProductsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Products by imageId and objectId
   * Returns Products belongs to a imageId and objectId
   * @param imageId    * @param objectId 
  */
  public void getProductsByImageIdAndObjectId (String imageId, Integer objectId, final Response.Listener<GetProductsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'imageId' is set
    if (imageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageId' when calling getProductsByImageIdAndObjectId",
        new ApiException(400, "Missing the required parameter 'imageId' when calling getProductsByImageIdAndObjectId"));
    }
    // verify the required parameter 'objectId' is set
    if (objectId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectId' when calling getProductsByImageIdAndObjectId",
        new ApiException(400, "Missing the required parameter 'objectId' when calling getProductsByImageIdAndObjectId"));
    }

    // create path and map variables
    String path = "/products/images/{imageId}/objects/{objectId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "imageId" + "\\}", apiInvoker.escapeString(imageId.toString())).replaceAll("\\{" + "objectId" + "\\}", apiInvoker.escapeString(objectId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = (HttpEntity) localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetProductsResponse) ApiInvoker.deserialize(localVarResponse,  "", GetProductsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
